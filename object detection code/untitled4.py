# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1USemFoduj8pgMq5jVXuejCx8GRC9SGd1
"""

!git clone https://github.com/noobmaster69-max/Retail.git

from IPython.display import display, Javascript
from google.colab.output import eval_js
from base64 import b64decode

def take_photo(filename='photo.jpg', quality=0.8):
  js = Javascript('''
    async function takePhoto(quality) {
      const div = document.createElement('div');
      const capture = document.createElement('button');
      capture.textContent = 'Capture';
      div.appendChild(capture);

      const video = document.createElement('video');
      video.style.display = 'block';
      const stream = await navigator.mediaDevices.getUserMedia({video: true});

      document.body.appendChild(div);
      div.appendChild(video);
      video.srcObject = stream;
      await video.play();
      
      // Resize the output to fit the video element.
      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);

      // Wait for Capture to be clicked.
      await new Promise((resolve) => capture.onclick = resolve);

      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0);
      stream.getVideoTracks()[0].stop();
      div.remove();
      return canvas.toDataURL('image/jpeg', quality);
    }
    ''')
  display(js)
  data = eval_js('takePhoto({})'.format(quality))
  binary = b64decode(data.split(',')[1])
  with open(filename, 'wb') as f:
    f.write(binary)
  return filename

!pip install -qr '/content/Retail/yolo/requirements.txt'
!pip install pyqrcode
!pip install pypng
import sys
sys.path.insert(0, '/content/Retail/yolo/')

# Commented out IPython magic to ensure Python compatibility.
from IPython.display import Image
import os,random
from glob import glob
import matplotlib.pyplot as plt
from PIL import Image
from google.colab.patches import cv2_imshow
import cv2
import pyqrcode 
import png 
from pyqrcode import QRCode 
import numpy as np
# %matplotlib inline

while True:
  try:
  
  #filename = take_photo()
  # output = !python '/content/yolov5/detect.py' \
  #           --source filename \
  #           --weights '/content/runs/train/products/weights/best.pt' \
  #           --project '/content/OUTPUTS/' --device 'cpu'
    img = cv2.imread(take_photo())
    cv2_imshow(img)
    print('Save to photo.jpg....')
  
  # Show the image which was just taken.
  #display(Image(filename))
  
  except Exception as err:
  # Errors will be thrown if the user does not have a webcam or if they do not
  # grant the page permission to access it.
    print(str(err))

  output = !python '/content/Retail/yolo/detect.py' \
            --source '/content/photo.jpg' \
            --weights '/content/Retail/yolo/best.pt' \
            --save-txt
          
  print(output)

  f = open('/content/runs/detect/exp/labels/photo.txt','r')
  lines = f.readlines()
  labels = []
  apple_count = 0
  orange_count = 0
  banana_count = 0
  for row in lines:
    labels.append(row[0])
  
  for label in labels:
    
    if label is '0':
      apple_count = apple_count + 1
    
    if label is '1':
      banana_count = banana_count + 1
    
    if label is '2':
      orange_count = orange_count + 1

  print("The number of apple : {}".format(apple_count))
  print("The number of banana : {}".format(banana_count))
  print("The number of orange : {}".format(orange_count))

  
  list =[apple_count,banana_count,orange_count]
  string = str(list)[1:-1]
  url = pyqrcode.create(string)
  url.svg("myqr.svg", scale = 8)
  url.png('myqr.png', scale = 6)
  qrimg = cv2.imread('/content/myqr.png')
  cv2_imshow(qrimg)
  
  os.remove('/content/runs/detect/exp/photo.jpg')
  os.remove('/content/runs/detect/exp/labels/photo.txt')
  os.rmdir('/content/runs/detect/exp/labels')
  os.rmdir('/content/runs/detect/exp')
  os.rmdir('/content/runs/detect')
  os.rmdir('/content/runs')